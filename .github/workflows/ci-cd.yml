name: CI/CD - Microservicio Node.js en DOCKER desplegado en EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab
  APP_PORT: ${{ secrets.APP_PORT || 3000 }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'root' }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE || 'itemsdb' }}

jobs:
  ci:
    name: Integración continua (build y test)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: itemsdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Obtener código
        uses: actions/checkout@v4

      - name: Configuración Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        run: npm install

      - name: Esperar a que MySQL se inicie
        run: |
          echo "Esperando que MySQL se inicie..."
          sleep 20

      - name: Ejecutar pruebas
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: itemsdb
        run: npm test

      - name: Iniciar sesión en Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Construir imagen (latest)
        run: docker build -t $IMAGE_NAME:latest .

      - name: Publicar imagen (latest)
        run: docker push $IMAGE_NAME:latest

  cd:
    name: Despliegue robusto en EC2 vía SSM
    runs-on: ubuntu-latest
    needs: [ci]

    steps:
      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Obtener ID de la instancia EC2
        id: ec2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=demo-lab-cicd" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Desplegar contenedores Docker en EC2
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab:latest
          APP_PORT: ${{ env.APP_PORT }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        run: |
          aws ssm send-command \
            --targets "Key=instanceIds,Values=$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Desplegando app Node.js y MySQL en Docker" \
            --parameters commands='[
              "set -euxo pipefail",
              "sudo systemctl enable docker || true",
              "sudo systemctl start docker || true",
              "docker network inspect appnet >/dev/null 2>&1 || docker network create appnet",
              
              "# MySQL: iniciar si no existe",
              "docker ps -q --filter \"name=mysql-demo\" | grep -q . || docker run -d --name mysql-demo --network appnet -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -e MYSQL_DATABASE=$MYSQL_DATABASE mysql:8",
              
              "sleep 20",
              "docker exec -i mysql-demo mysql -u root -p$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE -e \"CREATE TABLE IF NOT EXISTS items (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) NOT NULL);\"",
              
              "# Node.js: detener y eliminar si existe",
              "docker ps -q --filter \"name=demo-microservice-lab\" | grep -q . && docker stop demo-microservice-lab || true",
              "docker ps -aq --filter \"name=demo-microservice-lab\" | grep -q . && docker rm demo-microservice-lab || true",
              
              "# Ejecutar Node.js",
              "docker pull $IMAGE",
              "docker run -d --name demo-microservice-lab --restart unless-stopped --network appnet -p 80:$APP_PORT -e DB_HOST=mysql-demo -e DB_USER=root -e DB_PASSWORD=$MYSQL_ROOT_PASSWORD -e DB_NAME=$MYSQL_DATABASE $IMAGE"
            ]'
