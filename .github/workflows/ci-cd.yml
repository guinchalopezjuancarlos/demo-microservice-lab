name: CI/CD - Microservicio Node.js en DOCKER desplegado en EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab
  APP_PORT: ${{ secrets.APP_PORT || 3000 }}
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: itemsdb

jobs:
  ci:
    name: Integración continua (build y test)
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Obtener código
        uses: actions/checkout@v4

      - name: Configuración Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        run: npm install
        working-directory: app

      - name: Esperar a que MySQL inicie
        run: sleep 20

      - name: Ejecutar pruebas
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          DB_NAME: ${{ env.MYSQL_DATABASE }}
        run: npm test
        working-directory: app

      - name: Iniciar sesión en Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Construir imagen (latest)
        run: docker build -t $IMAGE_NAME:latest -f Dockerfile .

      - name: Publicar imagen (latest)
        run: docker push $IMAGE_NAME:latest

  cd:
    name: Entrega y despliegue en EC2
    runs-on: ubuntu-latest
    needs: [ci]

    steps:
      - name: Instalar cliente SSH
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Cargar clave privada en ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Registrar known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: ssh-keyscan -T 10 -H "$EC2_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Probar conexión SSH
        env:
          HOST: ${{ secrets.EC2_HOST }}
        run: ssh -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes ec2-user@"$HOST" 'whoami && uname -a'

      - name: Desplegar contenedor en EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab:latest
          APP_PORT: ${{ env.APP_PORT }}
        run: |
          ssh -o IdentitiesOnly=no -o StrictHostKeyChecking=yes \
              ec2-user@"$HOST" "IMAGE='$IMAGE' APP_PORT='$APP_PORT' bash -s" << 'EOF'
          set -euxo pipefail

          # Iniciar Docker
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl start docker || true
          else
            sudo service docker start || true
          fi

          # Crear red si no existe
          docker network inspect appnet >/dev/null 2>&1 || docker network create appnet

          # Detener y eliminar contenedor existente
          docker ps -q --filter "name=demo-microservice-lab" | grep -q . && docker stop demo-microservice-lab || true
          docker ps -aq --filter "name=demo-microservice-lab" | grep -q . && docker rm demo-microservice-lab || true

          # Pull y run del contenedor
          docker pull "$IMAGE"
          docker run -d --name demo-microservice-lab --restart unless-stopped \
            --network appnet -p 80:"$APP_PORT" "$IMAGE"
          EOF
