name: CI/CD - Microservicio Node.js en DOCKER desplegado en EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab
  APP_PORT: ${{ secrets.APP_PORT || 3000 }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}

jobs:
  ci:
    name: Integracion continua (build y test)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - name: Obtener codigo
        uses: actions/checkout@v4

      - name: Configuracion Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar dependencias
        run: npm install

      - name: Ejecutar las pruebas
        run: npm test

      - name: Iniciar sesion en Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Construir imagen (latest)
        run: docker build -t $IMAGE_NAME:latest .

      - name: Publicar la imagen (latest)
        run: docker push $IMAGE_NAME:latest

  cd:
    name: Entrega y despliegue en EC2
    runs-on: ubuntu-latest
    needs: [ci]

    steps:
      - name: Instalar cliente SSH
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Cargar clave privada en ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Registrar known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Probar conexi√≥n SSH
        env:
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@"$HOST" 'whoami && uname -a'

      - name: Desplegar contenedor en EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/demo-microservice-lab:latest
          APP_PORT: ${{ env.APP_PORT }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@"$HOST" bash -s <<'REMOTE_SCRIPT'
          set -euxo pipefail

          # Iniciar Docker
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl enable docker
            sudo systemctl start docker
          else
            sudo service docker start
          fi

          # Crear red Docker si no existe
          docker network inspect appnet >/dev/null 2>&1 || docker network create appnet

          # Iniciar contenedor MySQL si no existe
          docker ps -q --filter "name=mysql-demo" | grep -q . || \
          docker run -d --name mysql-demo \
            --network appnet \
            -e MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PASSWORD" \
            -e MYSQL_DATABASE="$MYSQL_DATABASE" \
            mysql:8

          sleep 20

          # Crear tabla items si no existe
          docker exec -i mysql-demo mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" \
            -e "CREATE TABLE IF NOT EXISTS items (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) NOT NULL);"

          # Detener y eliminar contenedor Node.js si existe
          docker ps -q --filter "name=demo-microservice-lab" | grep -q . && docker stop demo-microservice-lab || true
          docker ps -aq --filter "name=demo-microservice-lab" | grep -q . && docker rm demo-microservice-lab || true

          # Debug variables
          echo "Deploying Node.js app with:"
          echo "DB_HOST=mysql-demo"
          echo "DB_USER=root"
          echo "DB_PASSWORD=$MYSQL_ROOT_PASSWORD"
          echo "DB_NAME=$MYSQL_DATABASE"

          # Ejecutar contenedor Node.js
          docker pull "$IMAGE"
          docker run -d --name demo-microservice-lab --restart unless-stopped \
            --network appnet -p 80:"$APP_PORT" \
            -e DB_HOST=mysql-demo \
            -e DB_USER=root \
            -e DB_PASSWORD="$MYSQL_ROOT_PASSWORD" \
            -e DB_NAME="$MYSQL_DATABASE" \
            "$IMAGE"
          REMOTE_SCRIPT
